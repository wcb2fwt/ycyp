<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script type="text/javascript" src="https://unpkg.com/vtk.js"></script>
    <script type="text/javascript" src="https://unpkg.com/itk@12.4.0/umd/itk.js"></script>

</head>
<body>
<div id="container"></div>
        <script type="text/javascript">


            const container = document.querySelector('#container');
            //vtk renderwindow/renderer 设立渲染窗口和渲染器
            const renderWindow = vtk.Rendering.Core.vtkRenderWindow.newInstance();
            const renderer = vtk.Rendering.Core.vtkRenderer.newInstance();
            renderWindow.addRenderer(renderer);
            //webGl/opengl impl 渲染窗口附加实施WebGL
            const openGlRenderWindow = vtk.Rendering.OpenGL.vtkRenderWindow.newInstance();
            openGlRenderWindow.setContainer(container);
            openGlRenderWindow.setSize(1000,1000);
            renderWindow.addView(openGlRenderWindow);
            //Interactor 附加交互轨迹球控制
            const interactor = vtk.Rendering.Core.vtkRenderWindowInteractor.newInstance();
            interactor.setView(openGlRenderWindow);
            interactor.initialize();
            interactor.bindEvents(container);
            //Interactor style
            const trackball = vtk.Interaction.Style.vtkInteractorStyleTrackballCamera.newInstance();

            interactor.setInteractorStyle(trackball);
            //Pipeline 构建我们的渲染管道为了一个圆锥体
            const cone = vtk.Filters.Sources.vtkConeSource.newInstance();
            const actor = vtk.Rendering.Core.vtkActor.newInstance();
            const mapper = vtk.Rendering.Core.vtkMapper.newInstance();
            actor.setMapper(mapper);
            mapper.setInputConnection(cone.getOutputPort());
            renderer.addActor(actor);
            //Render 中央摄像机关于锥和触发渲染管道
            renderer.resetCamera();
            renderWindow.render();
        </script>
</body>
</html>